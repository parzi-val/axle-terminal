{
  "command": "jq",
  "description": "A JSON processor that uses a domain-specific language (DSL). More information: https://jqlang.github.io/jq/manual/.",
  "useCases": [
    {
      "description": "Execute a specific expression only using the jq binary (print a colored and formatted JSON output):",
      "syntax": "jq '.' {{/path/to/file.json}}"
    },
    {
      "description": "Execute a specific script:",
      "syntax": "{{cat path/to/file.json}} | jq --from-file {{path/to/script.jq}}"
    },
    {
      "description": "Pass specific arguments:",
      "syntax": "{{cat path/to/file.json}} | jq {{--arg &quot;name1&quot; &quot;value1&quot; --arg &quot;name2&quot; &quot;value2&quot; ...}} '{{. + $ARGS.named}}'"
    },
    {
      "description": "Create new JSON object via old JSON objects from multiple files:",
      "syntax": "{{cat path/to/multiple_json_file_*.json}} | jq '{{{newKey1: .key1, newKey2: .key2.nestedKey, ...}}}'"
    },
    {
      "description": "Print specific array items:",
      "syntax": "{{cat path/to/file.json}} | jq '{{.[index1], .[index2], ...}}'"
    },
    {
      "description": "Print all array/object values:",
      "syntax": "{{cat path/to/file.json}} | jq '.[]'"
    },
    {
      "description": "Print objects with 2-condition filter in array:",
      "syntax": "{{cat path/to/file.json}} | jq '.[] | select((.key1==&quot;value1&quot;) and .key2==&quot;value2&quot;)'"
    },
    {
      "description": "Add/remove specific keys:",
      "syntax": "{{cat path/to/file.json}} | jq '. {{+|-}} {{{&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: &quot;value2&quot;, ...}}}'"
    }
  ]
}
{
  "command": "git bisect",
  "description": "Use binary search to find the commit that introduced a bug. Git automatically jumps back and forth in the commit graph to progressively narrow down the faulty commit. More information: https://git-scm.com/docs/git-bisect.",
  "useCases": [
    {
      "description": "Start a bisect session on a commit range bounded by a known buggy commit, and a known clean (typically older) one:",
      "syntax": "git bisect start {{bad_commit}} {{good_commit}}"
    },
    {
      "description": "For each commit that git bisect selects, mark it as \"bad\" or \"good\" after testing it for the issue:",
      "syntax": "git bisect {{good|bad}}"
    },
    {
      "description": "After git bisect pinpoints the faulty commit, end the bisect session and return to the previous branch:",
      "syntax": "git bisect reset"
    },
    {
      "description": "Skip a commit during a bisect (e.g. one that fails the tests due to a different issue):",
      "syntax": "git bisect skip"
    },
    {
      "description": "Display a log of what has been done so far:",
      "syntax": "git bisect log"
    }
  ]
}
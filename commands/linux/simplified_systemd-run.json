{
  "command": "systemd-run",
  "description": "Run programs in transient scope units, service units, or path-, socket-, or timer-triggered service units. More information: https://www.freedesktop.org/software/systemd/man/systemd-run.html.",
  "useCases": [
    {
      "description": "Start a transient service:",
      "syntax": "sudo systemd-run {{command}} {{argument1 argument2 ...}}"
    },
    {
      "description": "Start a transient service under the service manager of the current user (no privileges):",
      "syntax": "systemd-run --user {{command}} {{argument1 argument2 ...}}"
    },
    {
      "description": "Start a transient service with a custom unit name and description:",
      "syntax": "sudo systemd-run --unit={{name}} --description={{string}} {{command}} {{argument1 argument2 ...}}"
    },
    {
      "description": "Start a transient service that does not get cleaned up after it terminates with a custom environment variable:",
      "syntax": "sudo systemd-run --remain-after-exit --set-env={{name}}={{value}} {{command}} {{argument1 argument2 ...}}"
    },
    {
      "description": "Start a transient timer that periodically runs its transient service (see man systemd.time for calendar event format):",
      "syntax": "sudo systemd-run --on-calendar={{calendar_event}} {{command}} {{argument1 argument2 ...}}"
    },
    {
      "description": "Share the terminal with the program (allowing interactive input/output) and make sure the execution details remain after the program exits:",
      "syntax": "systemd-run --remain-after-exit --pty {{command}}"
    },
    {
      "description": "Set properties (e.g. CPUQuota, MemoryMax) of the process and wait until it exits:",
      "syntax": "systemd-run --property MemoryMax={{memory_in_bytes}} --property CPUQuota={{percentage_of_CPU_time}}% --wait {{command}}"
    },
    {
      "description": "Use the program in a shell pipeline:",
      "syntax": "{{command1}} | systemd-run --pipe {{command2}} | {{command3}}"
    }
  ]
}